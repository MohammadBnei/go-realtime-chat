// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: message.proto

package messagePB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	GetRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	PostToRoom(ctx context.Context, in *Message, opts ...grpc.CallOption) (*RoomResponse, error)
	DeleteRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	StreamRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (Room_StreamRoomClient, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) GetRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/main.Room/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) PostToRoom(ctx context.Context, in *Message, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/main.Room/PostToRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) DeleteRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, "/main.Room/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) StreamRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (Room_StreamRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Room_ServiceDesc.Streams[0], "/main.Room/StreamRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomStreamRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Room_StreamRoomClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type roomStreamRoomClient struct {
	grpc.ClientStream
}

func (x *roomStreamRoomClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomServer is the server API for Room service.
// All implementations must embed UnimplementedRoomServer
// for forward compatibility
type RoomServer interface {
	GetRoom(context.Context, *RoomRequest) (*RoomResponse, error)
	PostToRoom(context.Context, *Message) (*RoomResponse, error)
	DeleteRoom(context.Context, *RoomRequest) (*RoomResponse, error)
	StreamRoom(*RoomRequest, Room_StreamRoomServer) error
	mustEmbedUnimplementedRoomServer()
}

// UnimplementedRoomServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServer struct {
}

func (UnimplementedRoomServer) GetRoom(context.Context, *RoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomServer) PostToRoom(context.Context, *Message) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostToRoom not implemented")
}
func (UnimplementedRoomServer) DeleteRoom(context.Context, *RoomRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomServer) StreamRoom(*RoomRequest, Room_StreamRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRoom not implemented")
}
func (UnimplementedRoomServer) mustEmbedUnimplementedRoomServer() {}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Room/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetRoom(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_PostToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).PostToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Room/PostToRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).PostToRoom(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Room/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).DeleteRoom(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_StreamRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomServer).StreamRoom(m, &roomStreamRoomServer{stream})
}

type Room_StreamRoomServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type roomStreamRoomServer struct {
	grpc.ServerStream
}

func (x *roomStreamRoomServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoom",
			Handler:    _Room_GetRoom_Handler,
		},
		{
			MethodName: "PostToRoom",
			Handler:    _Room_PostToRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Room_DeleteRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoom",
			Handler:       _Room_StreamRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
