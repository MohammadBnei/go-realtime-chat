// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: message/v1alpha/service.proto

package messagev1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_StreamMessages_FullMethodName = "/message.v1alpha.MessageService/StreamMessages"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamMessagesClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_StreamMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceStreamMessagesClient{stream}
	return x, nil
}

type MessageService_StreamMessagesClient interface {
	Send(*StreamMessagesRequest) error
	Recv() (*StreamMessagesResponse, error)
	grpc.ClientStream
}

type messageServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *messageServiceStreamMessagesClient) Send(m *StreamMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceStreamMessagesClient) Recv() (*StreamMessagesResponse, error) {
	m := new(StreamMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	StreamMessages(MessageService_StreamMessagesServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) StreamMessages(MessageService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).StreamMessages(&messageServiceStreamMessagesServer{stream})
}

type MessageService_StreamMessagesServer interface {
	Send(*StreamMessagesResponse) error
	Recv() (*StreamMessagesRequest, error)
	grpc.ServerStream
}

type messageServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *messageServiceStreamMessagesServer) Send(m *StreamMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceStreamMessagesServer) Recv() (*StreamMessagesRequest, error) {
	m := new(StreamMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.v1alpha.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessageService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/v1alpha/service.proto",
}
